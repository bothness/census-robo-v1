{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../LayerCake.svelte",
    "../../Html.svelte",
    "../../ScaledSvg.svelte",
    "../../Svg.svelte",
    "../../Tab.svelte",
    "../../TabList.svelte",
    "../../TabPanel.svelte",
    "../../App.svelte",
    "../../Fact.svelte",
    "../../Item.svelte",
    "../../Profile.svelte",
    "../../Ranks.svelte",
    "../../Table.svelte",
    "../../Theme.svelte",
    "../../App.svelte",
    "../../AxisX.svelte",
    "../../Column.svelte",
    "../../App.svelte",
    "../../AxisX.svelte",
    "../../Marker.svelte",
    "../../App.svelte"
  ],
  "sourcesContent": [
    "<script>\n\timport { setContext } from 'svelte';\n\timport { writable, derived } from 'svelte/store';\n\n\timport makeAccessor from './utils/makeAccessor.js';\n\timport filterObject from './utils/filterObject.js';\n\timport calcExtents from './lib/calcExtents.js';\n\timport calcDomain from './helpers/calcDomain.js';\n\timport createScale from './helpers/createScale.js';\n\timport createGetter from './helpers/createGetter.js';\n\timport getRange from './helpers/getRange.js';\n\timport defaultScales from './settings/defaultScales.js';\n\timport defaultReverses from './settings/defaultReverses.js';\n\n\texport let ssr = false;\n\texport let pointerEvents = true;\n\texport let position = 'relative';\n\texport let percentRange = false;\n\n\texport let width = undefined;\n\texport let height = undefined;\n\n\texport let containerWidth = width || 100;\n\texport let containerHeight = height || 100;\n\n\t/* --------------------------------------------\n\t * Parameters\n\t * Values that computed properties are based on and that\n\t * can be easily extended from config values\n\t *\n\t */\n\texport let x = undefined;\n\texport let y = undefined;\n\texport let z = undefined;\n\texport let r = undefined;\n\texport let custom = {};\n\texport let data = [];\n\texport let xDomain = undefined;\n\texport let yDomain = undefined;\n\texport let zDomain = undefined;\n\texport let rDomain = undefined;\n\texport let xNice = false;\n\texport let yNice = false;\n\texport let zNice = false;\n\texport let rNice = false;\n\texport let xReverse = defaultReverses.x;\n\texport let yReverse = defaultReverses.y;\n\texport let zReverse = defaultReverses.z;\n\texport let rReverse = defaultReverses.r;\n\texport let xPadding = undefined;\n\texport let yPadding = undefined;\n\texport let zPadding = undefined;\n\texport let rPadding = undefined;\n\texport let xScale = defaultScales.x;\n\texport let yScale = defaultScales.y;\n\texport let zScale = defaultScales.y;\n\texport let rScale = defaultScales.r;\n\texport let xRange = undefined;\n\texport let yRange = undefined;\n\texport let zRange = undefined;\n\texport let rRange = undefined;\n\texport let padding = {};\n\texport let extents = {};\n\texport let flatData = undefined;\n\n\t/* --------------------------------------------\n\t * Preserve a copy of our passed in settings before we modify them\n\t * Return this to the user's context so they can reference things if need be\n\t * Add the active keys since those aren't on our settings object.\n\t * This is mostly an escape-hatch\n\t */\n\tconst config = {};\n\t$: if (x) config.x = x;\n\t$: if (y) config.y = y;\n\t$: if (z) config.z = z;\n\t$: if (r) config.r = r;\n\t$: if (xDomain) config.xDomain = xDomain;\n\t$: if (yDomain) config.yDomain = yDomain;\n\t$: if (zDomain) config.zDomain = zDomain;\n\t$: if (rDomain) config.rDomain = rDomain;\n\t$: if (xRange) config.xRange = xRange;\n\t$: if (yRange) config.yRange = yRange;\n\t$: if (zRange) config.zRange = zRange;\n\t$: if (rRange) config.rRange = rRange;\n\n\t/* --------------------------------------------\n\t * Make store versions of each parameter\n\t * Prefix these with `_` to keep things organized\n\t */\n\tconst _percentRange = writable();\n\tconst _containerWidth = writable();\n\tconst _containerHeight = writable();\n\tconst _x = writable();\n\tconst _y = writable();\n\tconst _z = writable();\n\tconst _r = writable();\n\tconst _custom = writable();\n\tconst _data = writable();\n\tconst _xDomain = writable();\n\tconst _yDomain = writable();\n\tconst _zDomain = writable();\n\tconst _rDomain = writable();\n\tconst _xNice = writable();\n\tconst _yNice = writable();\n\tconst _zNice = writable();\n\tconst _rNice = writable();\n\tconst _xReverse = writable();\n\tconst _yReverse = writable();\n\tconst _zReverse = writable();\n\tconst _rReverse = writable();\n\tconst _xPadding = writable();\n\tconst _yPadding = writable();\n\tconst _zPadding = writable();\n\tconst _rPadding = writable();\n\tconst _xScale = writable();\n\tconst _yScale = writable();\n\tconst _zScale = writable();\n\tconst _rScale = writable();\n\tconst _xRange = writable();\n\tconst _yRange = writable();\n\tconst _zRange = writable();\n\tconst _rRange = writable();\n\tconst _padding = writable();\n\tconst _flatData = writable();\n\tconst _extents = writable();\n\tconst _config = writable(config);\n\n\t$: _percentRange.set(percentRange);\n\t$: _containerWidth.set(containerWidth);\n\t$: _containerHeight.set(containerHeight);\n\t$: _x.set(makeAccessor(x));\n\t$: _y.set(makeAccessor(y));\n\t$: _z.set(makeAccessor(z));\n\t$: _r.set(makeAccessor(r));\n\t$: _xDomain.set(xDomain);\n\t$: _yDomain.set(yDomain);\n\t$: _zDomain.set(zDomain);\n\t$: _rDomain.set(rDomain);\n\t$: _custom.set(custom);\n\t$: _data.set(data);\n\t$: _xNice.set(xNice);\n\t$: _yNice.set(yNice);\n\t$: _zNice.set(zNice);\n\t$: _rNice.set(rNice);\n\t$: _xReverse.set(xReverse);\n\t$: _yReverse.set(yReverse);\n\t$: _zReverse.set(zReverse);\n\t$: _rReverse.set(rReverse);\n\t$: _xPadding.set(xPadding);\n\t$: _yPadding.set(yPadding);\n\t$: _zPadding.set(zPadding);\n\t$: _rPadding.set(rPadding);\n\t$: _xScale.set(xScale);\n\t$: _yScale.set(yScale);\n\t$: _zScale.set(zScale);\n\t$: _rScale.set(rScale);\n\t$: _xRange.set(xRange);\n\t$: _yRange.set(yRange);\n\t$: _zRange.set(zRange);\n\t$: _rRange.set(rRange);\n\t$: _padding.set(padding);\n\t$: _extents.set(filterObject(extents));\n\t$: _flatData.set(flatData || data);\n\n\t/* --------------------------------------------\n\t * Create derived values\n\t * Suffix these with `_d`\n\t */\n\tconst activeGetters_d = derived([_x, _y, _z, _r], ([$x, $y, $z, $r]) => {\n\t\treturn [\n\t\t\t{ field: 'x', accessor: $x },\n\t\t\t{ field: 'y', accessor: $y },\n\t\t\t{ field: 'z', accessor: $z },\n\t\t\t{ field: 'r', accessor: $r }\n\t\t].filter(d => d.accessor);\n\t});\n\n\tconst padding_d = derived([_padding, _containerWidth, _containerHeight], ([$padding]) => {\n\t\tconst defaultPadding = { top: 0, right: 0, bottom: 0, left: 0 };\n\t\treturn Object.assign(defaultPadding, $padding);\n\t});\n\n\tconst box_d = derived([_containerWidth, _containerHeight, padding_d], ([$containerWidth, $containerHeight, $padding]) => {\n\t\tconst b = {};\n\t\tb.top = $padding.top;\n\t\tb.right = $containerWidth - $padding.right;\n\t\tb.bottom = $containerHeight - $padding.bottom;\n\t\tb.left = $padding.left;\n\t\tb.width = b.right - b.left;\n\t\tb.height = b.bottom - b.top;\n\t\tif (b.width < 0 && b.height < 0) {\n\t\t\tconsole.error('[LayerCake] Target div has negative width and height. Did you forget to set a width or height on the container?');\n\t\t} else if (b.width < 0) {\n\t\t\tconsole.error('[LayerCake] Target div has a negative width. Did you forget to set that CSS on the container?');\n\t\t} else if (b.height < 0) {\n\t\t\tconsole.error('[LayerCake] Target div has negative height. Did you forget to set that CSS on the container?');\n\t\t}\n\t\treturn b;\n\t});\n\n\tconst width_d = derived([box_d], ([$box]) => {\n\t\treturn $box.width;\n\t});\n\n\tconst height_d = derived([box_d], ([$box]) => {\n\t\treturn $box.height;\n\t});\n\n\t/* --------------------------------------------\n\t * Calculate extents by taking the extent of the data\n\t * and filling that in with anything set by the user\n\t */\n\tconst extents_d = derived([_flatData, activeGetters_d, _extents], ([$flatData, $activeGetters, $extents]) => {\n\t\treturn { ...calcExtents($flatData, $activeGetters.filter(d => !$extents[d.field])), ...$extents };\n\t});\n\n\tconst xDomain_d = derived([extents_d, _xDomain], calcDomain('x'));\n\tconst yDomain_d = derived([extents_d, _yDomain], calcDomain('y'));\n\tconst zDomain_d = derived([extents_d, _zDomain], calcDomain('z'));\n\tconst rDomain_d = derived([extents_d, _rDomain], calcDomain('r'));\n\n\tconst xScale_d = derived([_xScale, extents_d, xDomain_d, _xPadding, _xNice, _xReverse, width_d, height_d, _xRange, _percentRange], createScale('x'));\n\tconst xGet_d = derived([_x, xScale_d], createGetter);\n\n\tconst yScale_d = derived([_yScale, extents_d, yDomain_d, _yPadding, _yNice, _yReverse, width_d, height_d, _yRange, _percentRange], createScale('y'));\n\tconst yGet_d = derived([_y, yScale_d], createGetter);\n\n\tconst zScale_d = derived([_zScale, extents_d, zDomain_d, _zPadding, _zNice, _zReverse, width_d, height_d, _zRange, _percentRange], createScale('z'));\n\tconst zGet_d = derived([_z, zScale_d], createGetter);\n\n\tconst rScale_d = derived([_rScale, extents_d, rDomain_d, _rPadding, _rNice, _rReverse, width_d, height_d, _rRange, _percentRange], createScale('r'));\n\tconst rGet_d = derived([_r, rScale_d], createGetter);\n\n\tconst xRange_d = derived([xScale_d], getRange);\n\tconst yRange_d = derived([yScale_d], getRange);\n\tconst zRange_d = derived([zScale_d], getRange);\n\tconst rRange_d = derived([rScale_d], getRange);\n\n\tconst aspectRatio_d = derived([width_d, height_d], ([$aspectRatio, $width, $height]) => {\n\t\treturn $width / $height;\n\t});\n\n\t$: context = {\n\t\tactiveGetters: activeGetters_d,\n\t\twidth: width_d,\n\t\theight: height_d,\n\t\tpercentRange: _percentRange,\n\t\taspectRatio: aspectRatio_d,\n\t\tcontainerWidth: _containerWidth,\n\t\tcontainerHeight: _containerHeight,\n\t\tx: _x,\n\t\ty: _y,\n\t\tz: _z,\n\t\tr: _r,\n\t\tcustom: _custom,\n\t\tdata: _data,\n\t\txNice: _xNice,\n\t\tyNice: _yNice,\n\t\tzNice: _zNice,\n\t\trNice: _rNice,\n\t\txReverse: _xReverse,\n\t\tyReverse: _yReverse,\n\t\tzReverse: _zReverse,\n\t\trReverse: _rReverse,\n\t\txPadding: _xPadding,\n\t\tyPadding: _yPadding,\n\t\tzPadding: _zPadding,\n\t\trPadding: _rPadding,\n\t\tpadding: padding_d,\n\t\tflatData: _flatData,\n\t\textents: extents_d,\n\t\txDomain: xDomain_d,\n\t\tyDomain: yDomain_d,\n\t\tzDomain: zDomain_d,\n\t\trDomain: rDomain_d,\n\t\txRange: xRange_d,\n\t\tyRange: yRange_d,\n\t\tzRange: zRange_d,\n\t\trRange: rRange_d,\n\t\tconfig: _config,\n\t\txScale: xScale_d,\n\t\txGet: xGet_d,\n\t\tyScale: yScale_d,\n\t\tyGet: yGet_d,\n\t\tzScale: zScale_d,\n\t\tzGet: zGet_d,\n\t\trScale: rScale_d,\n\t\trGet: rGet_d\n\t};\n\n\t$: setContext('LayerCake', context);\n</script>\n\n{#if (ssr === true || typeof window !== 'undefined')}\n\t<div\n\t\tclass=\"layercake-container\"\n\t\tstyle=\"\n\t\t\tposition:{position};\n\t\t\t{position === 'absolute' ? 'top:0;right:0;bottom:0;left:0;' : ''}\n\t\t\t{pointerEvents === false ? 'pointer-events:none;' : ''}\n\t\t\"\n\t\tbind:clientWidth={containerWidth}\n\t\tbind:clientHeight={containerHeight}\n\t>\n\t\t<slot\n\t\t\twidth={$width_d}\n\t\t\theight={$height_d}\n\t\t\taspectRatio={$aspectRatio_d}\n\t\t\tcontainerWidth={$_containerWidth}\n\t\t\tcontainerHeight={$_containerHeight}\n\t\t></slot>\n\t</div>\n{/if}\n\n<style>\n\t.layercake-container,\n\t.layercake-container :global(*) {\n\t\tbox-sizing: border-box;\n\t}\n\t.layercake-container {\n\t\twidth: 100%;\n\t\theight: 100%;\n\t}\n</style>\n",
    "<script>\n\timport { getContext } from 'svelte';\n\n\texport let zIndex = undefined;\n\texport let pointerEvents = undefined;\n\n\tlet zIndexStyle = '';\n\t$: zIndexStyle = typeof zIndex !== 'undefined' ? `z-index:${zIndex};` : '';\n\n\tlet pointerEventsStyle = '';\n\t$: pointerEventsStyle = pointerEvents === false ? 'pointer-events:none;' : '';\n\n\tconst { padding } = getContext('LayerCake');\n</script>\n\n<div\n\tclass=\"layercake-layout-html\"\n\tstyle=\"top: {$padding.top}px; right:{$padding.right}px; bottom:{$padding.bottom}px; left:{$padding.left}px;{zIndexStyle}{pointerEventsStyle}\"\n>\n\t<slot></slot>\n</div>\n\n<style>\n\tdiv,\n\tslot {\n\t\tposition: absolute;\n\t\ttop: 0;\n\t\tleft: 0;\n\t}\n</style>\n",
    "<script>\n\timport { getContext } from 'svelte';\n\n\texport let fixedAspectRatio = 1;\n\texport let viewBox = `0 0 100 ${100 / fixedAspectRatio}`;\n\texport let zIndex = undefined;\n\texport let pointerEvents = undefined;\n\n\tlet zIndexStyle = '';\n\t$: zIndexStyle = typeof zIndex !== 'undefined' ? `z-index:${zIndex};` : '';\n\n\tlet pointerEventsStyle = '';\n\t$: pointerEventsStyle = pointerEvents === false ? 'pointer-events:none;' : '';\n\n\tconst { padding } = getContext('LayerCake');\n</script>\n\n<svg\n\t{viewBox}\n\tpreserveAspectRatio=\"none\"\n\tstyle=\"top: {$padding.top}px; right:0px; bottom:0px; left:{$padding.left}px;width:calc(100% - {($padding.left + $padding.right)}px);height:calc(100% - {($padding.top + $padding.bottom)}px);{zIndexStyle}{pointerEventsStyle}\"\n>\n\t<defs>\n\t\t<slot name=\"defs\"></slot>\n\t</defs>\n\n\t<slot></slot>\n</svg>\n\n<style>\n\tsvg {\n\t\tposition: absolute;\n\t\twidth: 100%;\n\t\theight: 100%;\n\t\toverflow: visible;\n\t}\n\tsvg :global(*) {\n\t\tvector-effect: non-scaling-stroke;\n\t}\n</style>\n",
    "<script>\n\timport { getContext } from 'svelte';\n\n\texport let viewBox = undefined;\n\texport let zIndex = undefined;\n\texport let pointerEvents = undefined;\n\n\tlet zIndexStyle = '';\n\t$: zIndexStyle = typeof zIndex !== 'undefined' ? `z-index:${zIndex};` : '';\n\n\tlet pointerEventsStyle = '';\n\t$: pointerEventsStyle = pointerEvents === false ? 'pointer-events:none;' : '';\n\n\tconst { containerWidth, containerHeight, padding } = getContext('LayerCake');\n</script>\n<svg\n\tclass=\"layercake-layout-svg\"\n\t{viewBox}\n\twidth={$containerWidth}\n\theight={$containerHeight}\n\tstyle=\"{zIndexStyle}{pointerEventsStyle}\"\n>\n\t<defs>\n\t\t<slot name=\"defs\"></slot>\n\t</defs>\n\t<g transform=\"translate({$padding.left}, {$padding.top})\">\n\t\t<slot></slot>\n\t</g>\n</svg>\n\n<style>\n\tsvg {\n\t\tposition: absolute;\n\t\ttop: 0;\n\t\tleft: 0;\n\t\toverflow: visible;\n\t}\n</style>\n",
    "<script>\n  import { getContext, onMount, tick } from 'svelte';\n\n  import getId from './id';\n  import { TABS } from './Tabs.svelte';\n\n  let tabEl;\n\n  const tab = {\n    id: getId()\n  };\n  const { registerTab, registerTabElement, selectTab, selectedTab, controls } = getContext(TABS);\n\n  let isSelected;\n  $: isSelected = $selectedTab === tab;\n\n  registerTab(tab);\n\n  onMount(async () => {\n    await tick();\n    registerTabElement(tabEl);\n  });\n</script>\n\n<style>\n\t.svelte-tabs__tab {\n\t\tborder: none;\n\t\tborder-bottom: 2px solid transparent;\n\t\tcolor: #000000;\n    cursor: pointer;\n    list-style: none;\n    display: inline-block;\n    padding: 0.5em 0.75em;\n\t}\n\t\n  .svelte-tabs__tab:focus {\n    outline: thin dotted;\n  }\n\n\t.svelte-tabs__selected {\n\t\tborder-bottom: 2px solid #4F81E5;\n    color: #4F81E5;\n\t}\n</style>\n\n<li\n  bind:this={tabEl}\n  role=\"tab\"\n  id={tab.id}\n  aria-controls={$controls[tab.id]}\n  aria-selected={isSelected}\n  tabindex=\"{isSelected ? 0 : -1}\"\n  class:svelte-tabs__selected={isSelected}\n  class=\"svelte-tabs__tab\"\n  on:click={() => selectTab(tab)}>\n\t<slot></slot>\n</li>\n",
    "<style>\n\t.svelte-tabs__tab-list {\n    border-bottom: 1px solid #CCCCCC;\n    margin: 0;\n    padding: 0;\n\t}\n</style>\n\n<ul role=\"tablist\" class=\"svelte-tabs__tab-list\">\n  <slot></slot>\n</ul>\n",
    "<script>\n  import { getContext } from 'svelte';\n\n  import getId from './id';\n  import { TABS } from './Tabs.svelte';\n\n  const panel = {\n    id: getId()\n  };\n  const { registerPanel, selectedPanel, labeledBy } = getContext(TABS);\n\n  registerPanel(panel);\n</script>\n\n<style>\n  .svelte-tabs__tab-panel {\n    margin-top: 0.5em;\n  }\n</style>\n\n<div \n  id={panel.id}\n  aria-labelledby={$labeledBy[panel.id]}\n  class=\"svelte-tabs__tab-panel\"\n  role=\"tabpanel\">\n  {#if $selectedPanel === panel}\n    <slot></slot>\n  {/if}\n</div>\n",
    "<script>\n\timport { Tabs, Tab, TabList, TabPanel } from 'svelte-tabs';\n  import { data } from './stores.js';\n\timport Place from './Place.svelte';\n\timport Skeleton from './Skeleton.svelte'\n\timport Profile from './Profile.svelte';\n\timport Select from './Select.svelte';\n\timport Table from './Table.svelte';\n\timport Theme from './Theme.svelte';\n\n\tlet selected = null;\n\n\tlet options = [];\n\tfor (const i in $data) {\n\t\tlet option = {};\n\t\toption.value = i;\n\t\toption.label = $data[i].name;\n\t\toptions.push(option);\n\t}\n\toptions.sort((a, b) => a.label.localeCompare(b.label, 'en', {ignorePunctuation: true}));\n\t\n\tlet total = options.length;\n\t\n\tlet breaks = [\n\t\tMath.round(total / 10),\n\t\tMath.round((2 * total) / 10),\n\t\tMath.round((3 * total) / 10),\n\t\tMath.round((4 * total) / 10),\n\t\tMath.round((5 * total) / 10),\n\t\tMath.round((6 * total) / 10),\n\t\tMath.round((7 * total) / 10),\n\t\tMath.round((8 * total) / 10),\n\t\tMath.round((9 * total) / 10)\n\t];\n\t\n\t$: place = $data[selected];\n\t\n\tlet theme = null;\n\t\n\tlet themes = [\n\t\t{\n\t\t\t'value': 'population',\n\t\t\t'label': 'Population growth'\n\t\t},\n\t\t{\n\t\t\t'value': 'tenure',\n\t\t\t'label': 'Home ownership'\n\t\t},\n\t\t{\n\t\t\t'value': 'ethnicity',\n\t\t\t'label': 'Ethnic diversity'\n\t\t},\n\t\t{\n\t\t\t'value': 'medage',\n\t\t\t'label': 'Age'\n\t\t},\n\t\t{\n\t\t\t'value': 'economic',\n\t\t\t'label': 'Employment'\n\t\t}\n\t];\n\t\n</script>\n\n<style>\n\t.main {\n\t\tmargin: 0;\n\t\tpadding: 0;\n\t\tmargin-top: 110px;\n\t}\n\t.panel {\n\t\tmax-width: 650px;\n\t}\n\th2 {\n\t\tmargin: 15px 0;\n\t}\n\t#header {\n\t\tposition: fixed;\n    top: 0;\n    width: 100%;\n\t\tbackground-color: #fff;\n\t}\n</style>\n\n<Tabs>\n\t<div id=\"header\">\n\t<h2>ONS Robo-Journalism Demos</h2>\n  <TabList>\n    <Tab>Profiles</Tab>\n\t\t<Tab>Indicators</Tab>\n\t\t<Tab>Key Data</Tab>\n\t\t<Tab>Themes</Tab>\n\t\t<Tab>2001 Census</Tab>\n    <Tab>2011 Census</Tab>\n    <Tab>Change +/-</Tab>\n\t</TabList>\n  </div>\n\n\t<TabPanel>\n\t\t<div class=\"main panel\">\n\t\t\t<Select {options} bind:selected message='Select a place' />\n\t\t  <Profile {place} {total} {selected} {breaks}/>\n\t\t</div>\n\t</TabPanel>\n\n  <TabPanel>\n\t\t<div class=\"main panel\">\n\t\t\t<Select {options} bind:selected message='Select a place' />\n\t\t  <Place {place} {total} {selected} {breaks}/>\n\t\t</div>\n  </TabPanel>\n\t\n\t<TabPanel>\n\t\t<div class=\"main panel\">\n\t\t\t<Select {options} bind:selected message='Select a place' />\n\t\t  <Skeleton {place} {total} {selected} {breaks}/>\n\t\t</div>\n  </TabPanel>\n\t\n\t<TabPanel>\n\t\t<div class=\"main panel\">\n\t\t\t<Select options={themes} bind:selected={theme} message='Select a theme' />\n\t\t  <Theme {total} {themes} {theme} {breaks}/>\n\t\t</div>\n  </TabPanel>\n\n  <TabPanel>\n\t\t<div class=\"main\">\n\t\t  <Table {options} set=\"c2001\"/>\n\t\t</div>\n  </TabPanel>\n\t\n\t<TabPanel>\n\t\t<div class=\"main\">\n\t\t\t<Table {options} set=\"c2011\"/>\n\t\t</div>\n  </TabPanel>\n\n  <TabPanel>\n\t\t<div class=\"main\">\n\t\t\t<Table {options} set=\"change\"/>\n\t\t</div>\n  </TabPanel>\n</Tabs>\n",
    "<script>\n\texport let place;\n\texport let indicator;\n\texport let breaks;\n\texport let group;\n\tlet unit = group === 'change' ? \"%\" : indicator.unit;\n\tlet set = indicator.unit === '%' ? 'perc' : 'val';\n\tlet rank = set === 'perc' ? 'rankp' : 'rank';\n</script>\n\n<style>\n\t.muted {\n\t\tcolor: #999;\n\t}\n\t.positive {\n\t\tcolor: #008c4e;\n\t}\n\t.negative {\n\t\tcolor: #f04b22;\n\t}\n\t.quin {\n\t\tcolor: white;\n\t\tpadding: 0 3px;\n\t}\n\t.lo {\n\t\tbackground-color: #f04b22;\n\t}\n\t.hi {\n\t\tbackground-color: #008c4e;\n\t}\n</style>\n\n{#if place.data[indicator.dataset][rank][group][indicator.value] < breaks[0]}\n  <li>{indicator.name}\n  {#if place.data[indicator.dataset][set][group][indicator.value] < 0 && group === 'change'}\n<strong class=\"negative\">&#9662;{Math.abs(place.data[indicator.dataset][set][group][indicator.value]).toLocaleString()}{unit}</strong>\n  {:else if place.data[indicator.dataset][set][group][indicator.value] > 0 && group === 'change'}\n<strong class=\"positive\">&#9652;{place.data[indicator.dataset][set][group][indicator.value].toLocaleString()}{unit}</strong>\n  {:else}\n<strong>{place.data[indicator.dataset][set][group][indicator.value].toLocaleString()}{unit}</strong>\n  {/if}\n<small class=\"quin hi\">{place.data[indicator.dataset][rank][group][indicator.value]}</small> <small class=\"muted\">(top 10%)</small></li>\n{:else if place.data[indicator.dataset][rank][group][indicator.value] >= breaks[8]}\n  <li>{indicator.name} \n  {#if place.data[indicator.dataset][set][group][indicator.value] < 0 && group === 'change'}\n<strong class=\"negative\">&#9662;{Math.abs(place.data[indicator.dataset][set][group][indicator.value]).toLocaleString()}{unit}</strong>\n  {:else if place.data[indicator.dataset][set][group][indicator.value] > 0 && group === 'change'}\n<strong class=\"positive\">&#9652;{place.data[indicator.dataset][set][group][indicator.value].toLocaleString()}{unit}</strong>\n  {:else}\n<strong>{place.data[indicator.dataset][set][group][indicator.value].toLocaleString()}{unit}</strong>\n  {/if}\n\t<small class=\"quin lo\">{place.data[indicator.dataset][rank][group][indicator.value]}</small> <small class=\"muted\">(bottom 10%)</small></li>\n{/if}\n",
    "<script>\n\texport let name;\n\texport let place;\n\texport let dataset;\n\texport let value;\n\texport let unit;\n\texport let breaks;\n\t\n\tlet set = unit === '%' ? 'perc' : 'val';\n\t\n\t$: rank = unit === '%' ? place.data[dataset].rankp.c2011[value] : place.data[dataset].rank.c2011[value];\n\t$: quin = rank < breaks[1] ? 'q5' : rank < breaks[3] ? 'q4' : rank < breaks[5] ? 'q3' : rank < breaks[7] ? 'q2' : 'q1';\n\t\n\t$: crank = place.data[dataset].rank.change[value];\n\t$: cquin = crank < breaks[1] ? 'q5' : crank < breaks[3] ? 'q4' : crank < breaks[5] ? 'q3' : crank < breaks[7] ? 'q2' : 'q1';\n</script>\n\n<style>\n\t.muted {\n\t\tcolor: #555;\n\t}\n\t.positive {\n\t\tcolor: #008c4e;\n\t}\n\t.negative {\n\t\tcolor: #f04b22;\n\t}\n\t.quin {\n\t\tcolor: white;\n\t\tpadding: 0 3px;\n\t}\n\t.q1 {\n\t\tbackground-color: #f04b22;\n\t}\n\t.q2 {\n\t\tbackground-color: #f68620;\n\t}\n\t.q3 {\n\t\tbackground-color: #ffcb06;\n\t}\n\t.q4 {\n\t\tbackground-color: #7ec349;\n\t}\n\t.q5 {\n\t\tbackground-color: #008c4e;\n\t}\n</style>\n\n<li>{name}: <strong>{place.data[dataset][set].c2011[value].toLocaleString()}{unit}</strong> <small class=\"quin {quin}\">{rank}</small> \n{#if place.data[dataset][set].change[value] < 0}\n  <span class=\"negative\">&#9662;{Math.abs(place.data[dataset][set].change[value])}%</span>\n{:else if place.data[dataset][set].change[value] > 0}\n  <span class=\"positive\">&#9652;{place.data[dataset][set].change[value]}%</span>\n{:else}\n  <span class=\"muted\">{place.data[dataset][set].change[value]}%</span>\n{/if}\n<small class=\"quin {cquin}\">{crank}</small></li>\n",
    "<script>\n\timport Ranks from './Ranks.svelte';\n\timport Quantile from './quantile/App.svelte';\n\timport Barchart from './barchart/App.svelte';\n\timport { data, metadata } from './stores.js';\n\t\n\texport let selected, place, breaks, total;\n\t\n\tlet head = {\n\t\t'headline': null,\n\t\t'subhead': null\n\t};\n\n\tlet chartcolor = 'rgb(0, 97, 180)';\n\n\tlet share = true;\n\n\tfunction chartData(place, indicator, selector) {\n\t\tlet data = [];\n\t\tconsole.log($metadata);\n\t\tfor (const i in $metadata[indicator].codes) {\n\t\t\tlet item = {\n\t\t\t\tlabel: $metadata[indicator].labels[i],\n\t\t\t\tvalue: place.data[indicator][selector[0]][selector[1]][$metadata[indicator].codes[i]]\n\t\t\t};\n\t\t\tdata.push(item);\n\t\t}\n\t\tconsole.log(data);\n\t\treturn data;\n\t};\n\n\tfunction getQuintiles(breaks, selector) {\n\t\tlet values = [];\n\t\tfor (const key in $data) {\n\t\t\tvalues.push($data[key].data[selector[0]][selector[1]][selector[2]][selector[3]]);\n\t\t}\n\t\tvalues = values.sort((a, b) => a - b);\n\t\tconsole.log(values);\n\t\tlet set = [values[0], values[breaks[1]], values[breaks[3]], values[breaks[5]], values[breaks[7]], values[values.length - 1]];\n\t\tconsole.log(set);\n\t\treturn set;\n\t}\n\t\n\tfunction adjectify(rank, words) {\n\t\twords[2] = words[2] ? words[2] : '';\n\t\tif (rank < breaks[1]) {\n\t\t\treturn 'significantly ' + words[0] + ' than';\n\t\t} else if (rank < breaks[3]) {\n\t\t\treturn 'somewhat ' + words[0] + ' than';\n\t\t} else if (rank < breaks[5]) {\n\t\t\treturn words[2] + 'close to';\n\t\t\treturn 'close to';\n\t\t} else if (rank < breaks[7]) {\n\t\t\treturn 'somewhat ' + words[1] + ' than';\n\t\t} else {\n\t\t\treturn 'significantly ' + words[1] + ' than';\n\t\t}\n\t}\n\t\n\tfunction plusminus(value, unit, singular = '%') {\n\t\tunit = Math.abs(value) === 1 ? singular : unit;\n\t\tif (value > 0) {\n\t\t\treturn 'an increase of ' + value + unit + ' compared to 2001';\n\t\t} else if (value < 0) {\n\t\t\treturn 'a decrease of ' + Math.abs(value) + unit + ' compared to 2001'\n\t\t}  else if (value < 0) {\n\t\t\treturn 'the same as in 2001'\n\t\t}\n\t}\n\t\n\tfunction getHeadline(place) {\n\t\tlet content = [\n\t\t\t{\n\t\t\t\t'rank': place.data.population.rank.change.all,\n\t\t\t\t'headline': 'Big population rise in ' + place.name,\n\t\t\t\t'subhead': place.name + ' has seen one of the largest population rises in England and Wales according to Census data.'\n\t\t\t},\n\t\t\t{\n\t\t\t\t'rank': total - place.data.population.rank.change.all,\n\t\t\t\t'headline': place.name + '\\'s population is shrinking',\n\t\t\t\t'subhead': place.name + ' is one of the few places in England and Wales where the population is getting smaller according to Census data.'\n\t\t\t},\n\t\t\t{\n\t\t\t\t'rank': place.data.tenure.rankp.change.owned,\n\t\t\t\t'headline': 'Home ownership rise in ' + place.name,\n\t\t\t\t'subhead': place.name + ' is among the few areas in England and Wales to that has seen a rise in home ownership according to Census data.'\n\t\t\t},\n\t\t\t{\n\t\t\t\t'rank': total - place.data.tenure.rankp.change.owned,\n\t\t\t\t'headline': 'Big home ownership decline in ' + place.name,\n\t\t\t\t'subhead': place.name + ' has seen one of the largest declines in home ownership in England and Wales according to Census data.'\n\t\t\t},\n\t\t\t{\n\t\t\t\t'rank': place.data.medage.rank.change.median,\n\t\t\t\t'headline': place.name + ' is getting older',\n\t\t\t\t'subhead': place.name + ' has seen one of the largest rises in avarage age in England and Wales according to Census data.'\n\t\t\t},\n\t\t\t{\n\t\t\t\t'rank': total - place.data.medage.rank.change.median,\n\t\t\t\t'headline': place.name + ' is getting younger',\n\t\t\t\t'subhead': place.name + ' is among the few areas in England and Wales where the average age is declining according to Census data.'\n\t\t\t},\n\t\t\t{\n\t\t\t\t'rank': total - place.data.ethnicity.rankp.change.white,\n\t\t\t\t'headline': 'Ethnic diversity rises in ' + place.name,\n\t\t\t\t'subhead': place.name + ' saw one of the largest BAME population rises in England and Wales according to Census data.'\n\t\t\t}\n\t\t]\n\t\tlet ranks = content.map(item => item.rank);\n\t\tlet min = Math.min(...ranks);\n\t\tif (min < breaks[0]) {\n\t\t  let index = ranks.indexOf(min);\n\t\t\treturn {\n\t\t\t\t'headline': content[index].headline,\n\t\t\t\t'subhead': content[index].subhead\n\t\t\t};\n\t\t} else {\n\t\t\treturn {\n\t\t\t\t'headline': 'Latest Census data for ' + place.name,\n\t\t\t\t'subhead': 'The Office for National Statistics has released Census data for ' + place.name + '.'\n\t\t\t};\n\t\t}\n\t}\n</script>\n\n<style>\n\t.quantile {\n\t\tmargin-top: 20px;\n\t\tmax-width: 400px;\n\t}\n\t.barchart {\n\t\tmargin-top: 20px;\n\t\tmax-width: 400px;\n\t\theight: 160px;\n\t}\n</style>\n\n{#if selected != null}\n<h1>{getHeadline(place).headline}</h1>\n<p>\n\t<strong>{getHeadline(place).subhead}</strong>\n</p>\n<p>\n\t{place.name} had a population of {place.data.population.val.c2011.all.toLocaleString()} on Census day 2011, {plusminus(Math.round(place.data.population.val.change.all), '%')}, which was {adjectify(place.data.population.rank.change.all, ['higher', 'lower'])} the average change across all local authorities. Its population density was {place.data.density.val.c2011.density.toLocaleString()} people per hectare, {adjectify(place.data.density.rank.c2011.density, ['higher', 'lower'])} average.\n</p>\n<div class='quantile'><Quantile breaks={getQuintiles(breaks, ['density', 'val', 'c2011', 'density'])} value={place.data.density.val.c2011.density} layout={{decimals: 1}} {share}/></div>\n<small>Density, people per hectare</small>\n<p>\n  The population of {place.name} is {adjectify(place.data.medage.rank.c2011.median, ['older', 'younger'])} other local authorities, with a median age of {place.data.medage.val.c2011.median}, {plusminus(place.data.medage.val.c2011.median - place.data.medage.val.c2001.median, ' years', ' year')}. Of the total population, {Math.round(place.data.age.perc.c2011.a015)}% is aged 15 or under, {Math.round(place.data.age.perc.c2011.a1664)}% is 16 to 64, and {Math.round(place.data.age.perc.c2011.a65plus)}% is aged 65 or over.\n</p>\n<div class='quantile'><Quantile breaks={getQuintiles(breaks, ['medage', 'val', 'c2011', 'median'])} value={place.data.medage.val.c2011.median} {share}/></div>\n<small>Median age, years</small>\n<div class='barchart'><Barchart data={chartData(place, 'age', ['perc', 'c2011'])} layout={{unit: '%', fill: chartcolor, decimals: 1}} {share}/></div>\n<small>Age groups, %</small>\n<p>\n  {place.name} has a {adjectify(place.data.ethnicity.rankp.c2011.white, ['less ethnically diverse population', 'more ethnically diverse population', 'level of ethnic diversity '])} the country as a whole, with BAME communities making up {Math.round(100 - place.data.ethnicity.perc.c2011.white)}% of the population, {plusminus(-Math.round(place.data.ethnicity.perc.change.white), '%')}. Of the total population, {Math.round(place.data.ethnicity.perc.c2011.white)}% is White, {Math.round(place.data.ethnicity.perc.c2011.asian)}% is Asian, {Math.round(place.data.ethnicity.perc.c2011.black)}% is Black, and {Math.round(place.data.ethnicity.perc.c2011.mixed + place.data.ethnicity.perc.c2011.other)}% is from mixed or other backgrounds.\n</p>\n<div class='barchart'><Barchart data={chartData(place, 'ethnicity', ['perc', 'c2011'])} layout={{unit: '%', fill: chartcolor, decimals: 1}} {share}/></div>\n<small>Ethnicities, %</small>\n<p>\n  {Math.round(place.data.tenure.perc.c2011.owned)}% of households in {place.name} own their own home, which is {adjectify(place.data.tenure.rankp.c2011.owned, ['more', 'less'])} other local authorities. Of other households, {Math.round(place.data.tenure.perc.c2011.sharedown)}% are shared ownership, {Math.round(place.data.tenure.perc.c2011.rentsocial)}% are socially rented, {Math.round(place.data.tenure.perc.c2011.rentprivate)}% are privately rented, and {Math.round(place.data.tenure.perc.c2011.other)}% have another tenure.\n</p>\n<div class='barchart'><Barchart data={chartData(place, 'tenure', ['perc', 'c2011'])} layout={{unit: '%', fill: chartcolor, decimals: 1}} {share}/></div>\n<small>Housing tenures, %</small>\n<p>\n  {Math.round(place.data.economic.perc.c2011.employed)}% of {place.name}'s working age population are in employment, which is {adjectify(place.data.economic.rankp.c2011.employed, ['more', 'less'])} in other local authority areas, and {plusminus(Math.round(place.data.economic.perc.change.employed), '%')}. Of the rest of the population {Math.round(place.data.economic.perc.c2011.unemployed)}% are unemployed, {Math.round(place.data.economic.perc.c2011.student)}% are students, {Math.round(place.data.economic.perc.c2011.carer)}% are full time carers, {Math.round(place.data.economic.perc.c2011.retired)}% are retired and {Math.round(place.data.economic.perc.c2011.inactive)}% are economically inactive.\n</p>\n<div class='barchart'><Barchart data={chartData(place, 'economic', ['perc', 'c2011'])} layout={{unit: '%', fill: chartcolor, decimals: 1}} {share}/></div>\n<small>Economic activity, %</small>\n{:else}\n<p>\n\tThis demo illustrates different ways of presenting local authority level data from the 2011 Census and how it changed from 2001, making use of robo-journalism and automation techniques.\n</p>\n<p>\n\t<strong>Select a place from the dropdown above to get started, and click on the tabs to explore different kinds of outputs.</strong>\n</p>\n{/if}",
    "<script>\n\texport let total, breaks;\n</script>\n\n<style>\n\t.quin {\n\t\tcolor: white;\n\t\tpadding: 0 3px;\n\t}\n  .q1 {\n\t\tbackground-color: #f04b22;\n\t}\n\t.q2 {\n\t\tbackground-color: #f68620;\n\t}\n\t.q3 {\n\t\tbackground-color: #ffcb06;\n\t}\n\t.q4 {\n\t\tbackground-color: #7ec349;\n\t}\n\t.q5 {\n\t\tbackground-color: #008c4e;\n\t}\n</style>\n\n<p>\n\tRank relative to other LAs:<br/>\n\t<small class=\"quin q5\">1 - {breaks[1] - 1}</small>\n\t<small class=\"quin q4\">{breaks[1]} - {breaks[3] - 1}</small>\n\t<small class=\"quin q3\">{breaks[3]} - {breaks[5] - 1}</small>\n\t<small class=\"quin q2\">{breaks[5]} - {breaks[7] - 1}</small>\n\t<small class=\"quin q1\">{breaks[7]} - {total}</small>\n</p>\n\n",
    "<script>\n\timport { data } from './stores.js';\n\texport let options, set;\n\t\n\tlet rows = [];\n\tfor (const i in options) {\n\t\tlet area = options[i];\n\t\tlet population = set === 'change' ? $data[area.value].data.population.val[set].all.toFixed(1) + '%' : $data[area.value].data.population.val[set].all;\n\t\tlet density = set === 'change' ? $data[area.value].data.density.val[set].density.toFixed(1) + '%' : $data[area.value].data.density.val[set].density;\n\t\tlet median = set === 'change' ? $data[area.value].data.medage.val[set].median.toFixed(1) + '%' : $data[area.value].data.medage.val[set].median;\n\t\tlet row = [\n\t\t\tarea.label,\n\t\t\t$data[area.value].area,\n\t\t\tpopulation,\n\t\t\tdensity,\n\t\t\tmedian,\n\t\t\t$data[area.value].data.age.perc[set].a015.toFixed(1) + '%',\n\t\t\t$data[area.value].data.age.perc[set].a1664.toFixed(1) + '%',\n\t\t\t$data[area.value].data.age.perc[set].a65plus.toFixed(1) + '%',\n\t\t\t$data[area.value].data.ethnicity.perc[set].white.toFixed(1) + '%',\n\t\t\t$data[area.value].data.ethnicity.perc[set].asian.toFixed(1) + '%',\n\t\t  $data[area.value].data.ethnicity.perc[set].black.toFixed(1) + '%',\n\t\t  $data[area.value].data.ethnicity.perc[set].mixed.toFixed(1) + '%',\n\t\t  $data[area.value].data.ethnicity.perc[set].other.toFixed(1) + '%',\n\t\t  $data[area.value].data.tenure.perc[set].owned.toFixed(1) + '%',\n\t\t  $data[area.value].data.tenure.perc[set].sharedown.toFixed(1) + '%',\n\t\t  $data[area.value].data.tenure.perc[set].rentsocial.toFixed(1) + '%',\n\t\t  $data[area.value].data.tenure.perc[set].rentprivate.toFixed(1) + '%',\n\t\t  $data[area.value].data.tenure.perc[set].other.toFixed(1) + '%',\n\t\t  $data[area.value].data.economic.perc[set].employed.toFixed(1) + '%',\n\t\t  $data[area.value].data.economic.perc[set].unemployed.toFixed(1) + '%',\n\t\t  $data[area.value].data.economic.perc[set].student.toFixed(1) + '%',\n\t\t  $data[area.value].data.economic.perc[set].carer.toFixed(1) + '%',\n\t\t  $data[area.value].data.economic.perc[set].retired.toFixed(1) + '%',\n\t\t  $data[area.value].data.economic.perc[set].inactive.toFixed(1) + '%'\n\t\t];\n\t\trows.push(row);\n\t}\n\t\n\tlet rowsort = 0;\n\n\tlet grid = [0, 4, 8, 13, 18];\n\tlet leftalign = [0];\n\t\n\tfunction sortTable(col) {\n\t\tconsole.log('sort');\n\t\tif (col === 0 && rowsort != 0) {\n\t\t\trows = rows.sort((a, b) => a[col].localeCompare(b[col], 'en'));\n\t\t\trowsort = col;\n\t\t} else if (rowsort === col) {\n\t\t\trows = rows.reverse();\n\t\t\trowsort = null;\n\t\t} else {\n\t\t\trows = rows.sort((a, b) => { return parseFloat(b[col]) - parseFloat(a[col]); });\n\t\t\trowsort = col;\n\t\t}\n\t}\n\n\tfunction isGrid(i) {\n\t\tlet classname = ''\n\t\tif (grid.includes(i)) {\n\t\t\tclassname += 'leftborder';\n\t\t}\n\t\tif (leftalign.includes(i)) {\n\t\t\tif (classname !== '') {\n\t\t\t\tclassname += ' ';\n\t\t\t}\n\t\t\tclassname += 'leftalign';\n\t\t}\n\t\treturn classname;\n\t}\n</script>\n\n<style>\n\ttable {\n\t  border-collapse: collapse;\n\t\tfont-size: 0.85em;\n\t}\n\tthead {\n\t\tborder-bottom: 2px solid #333;\n\t}\n\tth {\n\t\tcursor: pointer;\n\t\tfont-size: 0.8em;\n\t\ttext-transform: uppercase;\n\t}\n\ttd {\n\t\tborder-bottom: 1px solid #cdcdcd;\n\t}\n\tth, td {\n\t\tpadding: 4px 8px;\n\t\ttext-align: right;\n\t\tvertical-align: bottom;\n\t}\n\t.leftborder {\n\t\tborder-left: 1px solid #333;\n\t}\n\t.leftalign {\n\t\ttext-align: left !important;\n\t}\n</style>\n\n{#if options[0]}\n<table>\n\t<thead>\n\t\t<tr>\n\t\t\t<th rowspan=2>#</th>\n\t\t\t<th rowspan=2 class=\"leftborder leftalign\" on:click={()=>{sortTable(0)}}>Authority&#8645;</th>\n\t\t\t<th rowspan=2 on:click={()=>{sortTable(1)}}>Area&#8645;</th>\n\t\t\t<th rowspan=2 on:click={()=>{sortTable(2)}}>Population&#8645;</th>\n\t\t\t<th rowspan=2 on:click={()=>{sortTable(3)}}>Density&#8645;</th>\n\t\t\t<th colspan=4 class=\"leftborder leftalign\">Age</th>\n\t\t\t<th colspan=5 class=\"leftborder leftalign\">Ethnicity</th>\n\t\t\t<th colspan=5 class=\"leftborder leftalign\">Housing tenure</th>\n\t\t\t<th colspan=6 class=\"leftborder leftalign\">Economic activity</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<th class=\"leftborder leftalign\" on:click={()=>{sortTable(4)}}>Median&#8645;</th>\n\t\t\t<th on:click={()=>{sortTable(5)}}>0-15&#8645;</th>\n\t\t\t<th on:click={()=>{sortTable(6)}}>16-64&#8645;</th>\n\t\t\t<th on:click={()=>{sortTable(7)}}>65+&#8645;</th>\n\t\t\t<th class=\"leftborder\" on:click={()=>{sortTable(8)}}>White&#8645;</th>\n\t\t\t<th on:click={()=>{sortTable(9)}}>Asian&#8645;</th>\n\t\t\t<th on:click={()=>{sortTable(10)}}>Black&#8645;</th>\n\t\t\t<th on:click={()=>{sortTable(11)}}>Mixed&#8645;</th>\n\t\t\t<th on:click={()=>{sortTable(12)}}>Other&#8645;</th>\n\t\t\t<th class=\"leftborder\" on:click={()=>{sortTable(13)}}>Owned&#8645;</th>\n\t\t\t<th on:click={()=>{sortTable(14)}}>Shared&#8645;</th>\n\t\t\t<th on:click={()=>{sortTable(15)}}>Rented(soc)&#8645;</th>\n\t\t\t<th on:click={()=>{sortTable(16)}}>Rented(pri)&#8645;</th>\n\t\t\t<th on:click={()=>{sortTable(17)}}>Other&#8645;</th>\n\t\t\t<th class=\"leftborder\" on:click={()=>{sortTable(18)}}>Employed&#8645;</th>\n\t\t\t<th on:click={()=>{sortTable(19)}}>Unemployed&#8645;</th>\n\t\t\t<th on:click={()=>{sortTable(20)}}>Student&#8645;</th>\n\t\t\t<th on:click={()=>{sortTable(21)}}>Carer&#8645;</th>\n\t\t\t<th on:click={()=>{sortTable(22)}}>Retired&#8645;</th>\n\t\t\t<th on:click={()=>{sortTable(23)}}>Inactive&#8645;</th>\n\t\t</tr>\n\t</thead>\n\t<tbody>\n\t\t{#each rows as row, i}\n\t\t<tr>\n\t\t\t<td>{i + 1}</td>\n\t\t\t{#each row as item, j}\n\t\t\t<td class={isGrid(j)}>{item.toLocaleString()}</td>\n\t\t\t{/each}\n\t\t</tr>\n\t\t{/each}\n\t</tbody>\n</table>\n{/if}",
    "<script>\n\timport Quantile from './quantile/App.svelte';\n\timport { data } from './stores.js';\n\t\n\texport let total, themes, theme, breaks;\n\n\tlet share = true;\n\t\n\tlet natdata = {\n\t\t'population': {\n\t\t\t'val': dataSum(['population', 'val', 'c2011', 'all']),\n\t\t\t'change': dataChange(['population', 'val', 'all']),\n\t\t\t'lists': highlow(['population', 'val', 'change', 'all'])\n\t\t},\n\t\t'density': {\n\t\t\t'val': dataMedian(['density', 'val', 'c2011', 'density']),\n\t\t\t'lists': highlow(['density', 'val', 'c2011', 'density'])\n\t\t},\n\t\t'ownership': {\n\t\t\t'val': dataMedian(['tenure', 'perc', 'c2011', 'owned']),\n\t\t\t'change': dataChange(['tenure', 'perc', 'owned']),\n\t\t\t'lists': highlow(['tenure', 'perc', 'c2011', 'owned'])\n\t\t}\n\t};\n\t\n\t$: title = theme != null ? getTitle(theme): null;\n\t\n\tfunction dataSum(selector) {\n\t\tlet val = 0;\n\t\tfor (const key in $data) {\n\t\t\tval += $data[key].data[selector[0]][selector[1]][selector[2]][selector[3]];\n\t\t}\n\t\treturn val;\n\t}\n\t\n\tfunction dataChange(selector) {\n\t\tlet c2001 = 0;\n\t\tlet c2011 = 0;\n\t\tfor (const key in $data) {\n\t\t\tc2001 += $data[key].data[selector[0]][selector[1]].c2001[selector[2]];\n\t\t\tc2011 += $data[key].data[selector[0]][selector[1]].c2011[selector[2]];\n\t\t}\n\t\tlet val = Math.round(((c2011 / c2001) - 1) * 1000) / 10;\n\t\treturn val;\n\t}\n\n\tfunction getQuintiles(breaks, selector) {\n\t\tlet values = [];\n\t\tfor (const key in $data) {\n\t\t\tvalues.push($data[key].data[selector[0]][selector[1]][selector[2]][selector[3]]);\n\t\t}\n\t\tvalues = values.sort((a, b) => a - b);\n\t\tconsole.log(values);\n\t\tlet set = [values[0], values[breaks[1]], values[breaks[3]], values[breaks[5]], values[breaks[7]], values[values.length - 1]];\n\t\tconsole.log(set);\n\t\treturn set;\n\t}\n\t\n\tfunction dataMedian(selector) {\n\t\tlet med = Math.round(total / 2);\n\t\tlet rank = selector[1] === 'val' ? 'rank' : 'rankp';\n\t\tlet values = [];\n\t\tfor (const key in $data) {\n\t\t\tvalues.push($data[key].data[selector[0]][selector[1]][selector[2]][selector[3]]);\n\t\t}\n\t\tvalues.sort();\n\t\treturn values[med];\n\t}\n\t\n\tfunction getTitle(theme) {\n\t\tlet obj = themes.find(e => e.value === theme);\n\t\treturn obj.label;\n\t}\n\t\n\tfunction highlow(selector) {\n\t\tlet places = {\n\t\t\ttop: [],\n\t\t\tbottom: []\n\t\t};\n\t\tlet rank = selector[1] === 'val' ? 'rank' : 'rankp';\n\t\tfor (const key in $data) {\n\t\t\tlet ranking = $data[key].data[selector[0]][rank][selector[2]][selector[3]];\n\t\t\tif (ranking <= 5) {\n\t\t\t\tlet item = {\n\t\t\t\t\t'name': $data[key].name,\n\t\t\t\t\t'rank': ranking,\n\t\t\t\t\t'val': $data[key].data[selector[0]][selector[1]][selector[2]][selector[3]]\n\t\t\t\t}\n\t\t\t\tplaces.top.push(item);\n\t\t\t}\n\t\t\tif (ranking >= (total - 4)) {\n\t\t\t\tlet item = {\n\t\t\t\t\t'name': $data[key].name,\n\t\t\t\t\t'rank': ranking,\n\t\t\t\t\t'val': $data[key].data[selector[0]][selector[1]][selector[2]][selector[3]]\n\t\t\t\t}\n\t\t\t\tplaces.bottom.push(item);\n\t\t\t}\n\t\t}\n\t\tplaces.top.sort((a, b) => a.rank - b.rank);\n\t\tplaces.bottom.sort((a, b) => b.rank - a.rank);\n\t\treturn places;\n\t}\n</script>\n\n<style>\n\t.quantile {\n\t\tmargin-top: 20px;\n\t\tmax-width: 400px;\n\t}\n</style>\n\n{#if theme != null}\n<h2>{title}</h2>\n{#if theme === 'population'}\n<p>On Census day 2011, the total population of England and Wales was {natdata.population.val.toLocaleString()}, an increase of {natdata.population.change}% since 2001. The five local authorities that saw the largest population increase were \n{#each natdata.population.lists.top as top, i}\n\t{#if i === 4}\n\t  and {top.name} (+{top.val}%),\n\t{:else}\n\t  {top.name} (+{top.val}%),&nbsp;\n\t{/if}\n{/each}\nwhile the five that saw the largest decrease were\n{#each natdata.population.lists.bottom as bottom, i}\n\t{#if i === 4}\n    and {bottom.name} ({bottom.val.toFixed(1)}%).\n\t{:else}\n\t  {bottom.name} ({bottom.val.toFixed(1)}%), \n\t{/if}\n{/each}</p>\n<div class='quantile'><Quantile breaks={getQuintiles(breaks, ['population', 'val', 'change', 'all'])} layout={{unit: '%', decimals: 1}} {share}/></div>\n<small>Population growth %, quintiles</small>\n<p>The median population density across authorities in England and Wales was {natdata.density.val} people per hectare. The authorities with the highest population density were the London boroughs of \n{#each natdata.density.lists.top as top, i}\n\t{#if i === 4}\n    and {top.name} ({top.val}),\n\t{:else}\n\t  {top.name} ({top.val}),&nbsp;\n\t{/if}\n{/each}\nwhile the most sparsely populated were the rural districts of \n{#each natdata.density.lists.bottom as bottom, i}\n\t{#if i === 4}\n    and {bottom.name} ({bottom.val.toFixed(1)}).\n\t{:else}\n\t  {bottom.name} ({bottom.val.toFixed(1)}), \n\t{/if}\n{/each}</p>\n<div class='quantile'><Quantile breaks={getQuintiles(breaks, ['density', 'val', 'c2011', 'density'])} layout={{unit: '%', decimals: 1}} {share}/></div>\n<small>Population density, quintiles</small>\n{:else if theme === 'tenure'}\n<p>On Census day 2011, the rate home ownership across England and Wales was {natdata.ownership.val.toFixed(1)}%, a decrease of {Math.abs(natdata.ownership.change).toFixed(1)}% from 2001. The five local authorities with the highest level of home ownership were \n{#each natdata.ownership.lists.top as top, i}\n\t{#if i === 4}\n    and {top.name} ({top.val.toFixed(1)}%),\n\t{:else}\n\t  {top.name} ({top.val.toFixed(1)}%),&nbsp;\n\t{/if}\n{/each} while the five with the lowest were\n{#each natdata.ownership.lists.bottom as bottom, i}\n\t{#if i === 4}\n    and {bottom.name} ({bottom.val.toFixed(1)}%).\n\t{:else}\n\t  {bottom.name} ({bottom.val.toFixed(1)}%), \n\t{/if}\n{/each}</p>\n<div class='quantile'><Quantile breaks={getQuintiles(breaks, ['tenure', 'perc', 'c2011', 'owned'])} layout={{unit: '%', decimals: 1}} {share}/></div>\n<small>Home ownership %, quintiles</small>\n{:else}\n<p>No information for this theme yet.</p>\n{/if}\n{:else}\n<p>No theme selected.</p>\n{/if}",
    "<script>\n\t\n\timport { LayerCake, Svg, Html } from 'layercake';\n\timport { scaleBand } from 'd3-scale';\n\n\timport Column from './Column.svelte';\n\timport AxisX from './AxisX.svelte';\n\timport Share from '../share/App.svelte';\n\t\n\texport let data = [\n\t\t{ label: 'no data', value: 0 }\n\t];\n\t\n\texport let layout = {};\n\texport let share = false;\n\n\tlet height = share ? 'calc(100% - 30px)' : '100%';\n\t\n\tlet domain = data.map(i => i.label);\n\n\tconst xKey = 'label';\n\tconst yKey = 'value';\n\t\n</script>\n\n<style>\n\t.chart-container {\n\t\twidth: 100%;\n\t}\n</style>\n\n<div class=\"chart-container\" style=\"height: {height};\">\n\t<LayerCake\n\t\tpadding={{ top: 20, right: 0, bottom: 20, left: 0 }}\n\t\tx={xKey}\n\t\ty={yKey}\n\t\txScale={scaleBand().paddingInner([0.02]).round(true)}\n\t\txDomain={domain}\n\t\tyDomain={[0, null]}\n\t\tdata={data}\n\t>\n\t\t<Svg>\n\t\t\t<Column {layout}/>\n\t\t\t<AxisX\n\t\t\t\tgridlines={false}\n\t\t\t/>\n\t\t</Svg>\n\n\t</LayerCake>\n</div>\n{#if share}\n\t<Share {data} {layout} type=\"barchart\"/>\n{/if}",
    "<script>\n\timport { getContext } from 'svelte';\n\n\tconst { width, height, xScale, yScale, yRange } = getContext('LayerCake');\n\n\texport let gridlines = true;\n\texport let formatTick = d => d;\n\texport let baseline = false;\n\texport let snapTicks = false;\n\texport let ticks = undefined;\n\texport let xTick = undefined;\n\texport let yTick = 16;\n\texport let dxTick = 0;\n\texport let dyTick = 0;\n\n\t$: isBandwidth = typeof $xScale.bandwidth === 'function';\n\n\t$: tickVals = Array.isArray(ticks) ? ticks :\n\t\tisBandwidth ?\n\t\t\t$xScale.domain() :\n\t\t\t$xScale.ticks(ticks);\n\n\tfunction textAnchor(i) {\n\t\tif (snapTicks === true) {\n\t\t\tif (i === 0) {\n\t\t\t\treturn 'start';\n\t\t\t}\n\t\t\tif (i === tickVals.length - 1) {\n\t\t\t\treturn 'end';\n\t\t\t}\n\t\t}\n\t\treturn 'middle';\n\t}\n</script>\n\n<g class='axis x-axis'>\n\t{#each tickVals as tick, i}\n\t\t<g class='tick tick-{ tick }' transform='translate({$xScale(tick)},{$yRange[0]})'>\n\t\t\t{#if gridlines !== false}\n\t\t\t\t<line y1='{$height * -1}' y2='0' x1='0' x2='0'></line>\n\t\t\t{/if}\n\t\t\t<text\n\t\t\t\tx=\"{xTick || isBandwidth ? $xScale.bandwidth() / 2 : 0 }\"\n\t\t\t\ty='{yTick}'\n\t\t\t\tdx='{dxTick}'\n\t\t\t\tdy='{dyTick}'\n\t\t\t\ttext-anchor='{textAnchor(i)}'>{formatTick(tick)}</text>\n\t\t</g>\n\t{/each}\n\t{#if baseline === true}\n\t\t<line class=\"baseline\" y1='{$height + 0.5}' y2='{$height + 0.5}' x1='0' x2='{$width}'></line>\n\t{/if}\n</g>\n\n<style>\n\t.tick {\n\t\tfont-size: .8em;\n\t}\n\n\tline,\n\t.tick line {\n\t\tstroke: #aaa;\n\t\tstroke-dasharray: 2;\n\t}\n\n\t.tick text {\n\t\tfill: #000;\n\t}\n\n\t.baseline {\n\t\tstroke-dasharray: 0;\n\t}\n</style>\n",
    "<script>\n\timport { getContext } from 'svelte';\n\n\tconst { data, xGet, yGet, yRange, xScale } = getContext('LayerCake');\n\n\t$: columnWidth = d => {\n\t\tconst vals = $xGet(d);\n\t\treturn Math.max(0, (vals[1] - vals[0]));\n\t};\n\n\t$: columnHeight = d => {\n\t\treturn $yRange[0] - $yGet(d);\n\t};\n\n\t/* --------------------------------------------\n\t * Default styles\n\t */\n\texport let layout;\n\texport let stroke = '';\n\texport let strokeWidth = 0;\n\texport let dxTick = 0;\n\texport let dyTick = 0;\n\texport let formatTick = d => d;\n\texport let textAnchor = 'middle';\n\n</script>\n\n<style>\n\t.column-group {\n\t\tfont-size: .8em;\n\t}\n</style>\n\n<g class=\"column-group\">\n\t{#each $data as d, i}\n\t\t<rect\n\t\t\tclass='group-rect'\n\t\t\tdata-id=\"{i}\"\n\t\t\tx=\"{$xScale.bandwidth ? $xGet(d) : $xGet(d)[0]}\"\n\t\t\ty=\"{$yGet(d)}\"\n\t\t\twidth=\"{$xScale.bandwidth ? $xScale.bandwidth() : columnWidth(d)}\"\n\t\t\theight=\"{columnHeight(d)}\"\n\t\t\tfill={layout.fill}\n\t\t\t{stroke}\n\t\t\tstroke-width=\"{strokeWidth}\"\n\t\t/>\n\t  <text\n\t  \tx=\"{$xScale.bandwidth ? $xGet(d) + ($xScale.bandwidth() / 2) : $xGet(d)[0]}\"\n\t  \ty='{$yGet(d) - 4}'\n  \t\tdx='{dxTick}'\n  \t\tdy='{dyTick}'\n  \t\ttext-anchor='{textAnchor}'>{formatTick(d.value).toFixed(layout.decimals)}{layout.unit}</text>\n\t{/each}\n</g>",
    "<svelte:options accessors={true} />\n\n<script>\n\timport { LayerCake, Svg, flatten } from 'layercake';\n\timport { stack } from 'd3-shape';\n\timport { scaleBand, scaleOrdinal } from 'd3-scale';\n\timport { format, precisionFixed } from 'd3-format';\n\timport { tweened } from 'svelte/motion';\n\timport { cubicOut } from 'svelte/easing';\n\n\timport BarStacked from './BarStacked.svelte';\n\timport AxisX from './AxisX.svelte';\n\timport Marker from './Marker.svelte';\n\timport Share from '../share/App.svelte';\n\n\texport let breaks = [0, 100];\n\texport let value = null;\n\texport let layout = {};\n\texport let share = false;\n\n\tconst anim = tweened(0, {\n\t\tduration: 400,\n\t\teasing: cubicOut\n\t});\n\n\t$: anim.set(value || breaks[0]);\n\n\tlet data = makeData(breaks);\n\t\n\tfunction makeData(breaks) {\n\t\tlet data = [{}];\n\t\tfor (let i = 1; i < breaks.length; i ++) {\n\t\t\tlet val = breaks[i] - breaks[i - 1];\n\t\t\tdata[0]['q' + i] = val;\n\t\t}\n\t\treturn data;\n\t}\n\n\tlet xDomain = [breaks[0], breaks[breaks.length - 1]];\n\tlet yDomain = [0];\n\n\tconst xKey = [0, 1];\n\tconst yKey = 'key';\n\tconst zKey = 'key';\n\n\tconst seriesNames = Object.keys(data[0]).filter(d => d !== yKey);\n\tlet seriesColors = layout.colors ? layout.colors : ['rgb(210, 233, 254)', 'rgb(159, 201, 238)', 'rgb(24, 158, 212)', 'rgb(0, 97, 180)', 'rgb(0, 33, 104)'];\n\n\tdata.forEach(d => {\n\t\tseriesNames.forEach(name => {\n\t\t\td[name] = +d[name];\n\t\t});\n\t});\n\n\tconst stackData = stack()\n\t\t.keys(seriesNames);\n\n\tconst series = stackData(data);\n\n\tconst formatTickX = d => format(`.${precisionFixed(d)}s`)(d);\n</script>\n\n<style>\n\t.chart-container {\n\t\twidth: 100%;\n\t\theight: 50px;\n\t}\n</style>\n\n<div class=\"chart-container\">\n\t<LayerCake padding={{ top: 20, bottom: 20, left: 5, right: 5 }} x={xKey} y={d=> d.data[yKey]}\n\t\tz={zKey}\n\t\txDomain={xDomain}\n\t\tyScale={scaleBand().paddingInner([0]).round(true)}\n\t\tyDomain={yDomain}\n\t\tzScale={scaleOrdinal()}\n\t\tzDomain={seriesNames}\n\t\tzRange={seriesColors}\n\t\tflatData={flatten(series)}\n\t\tdata={series}\n\t\t>\n\t\t<Svg>\n\t\t\t<BarStacked/>\n\t\t\t<AxisX snapTicks={false} formatTick={formatTickX} ticks={breaks} />\n\t\t\t<Marker value={$anim} hasMarker={value !=null} {layout} />\n\t\t</Svg>\n\t</LayerCake>\n</div>\n{#if share}\n\t<Share data={{breaks: breaks, value: value}} {layout} type=\"quantile\"/>\n{/if}",
    "<script>\n\timport { getContext } from 'svelte';\n\n\tconst { width, height, xScale, yScale, yRange } = getContext('LayerCake');\n\n\texport let gridlines = true;\n\texport let formatTick = d => d;\n\texport let snapTicks = false;\n\texport let ticks = undefined;\n\texport let xTick = undefined;\n\texport let yTick = 16;\n\texport let dxTick = 0;\n\texport let dyTick = 0;\n\n\t$: isBandwidth = typeof $xScale.bandwidth === 'function';\n\n\t$: tickVals = Array.isArray(ticks) ? ticks :\n\t\tisBandwidth ?\n\t\t\t$xScale.domain() :\n\t\t\t$xScale.ticks(ticks);\n\n\tfunction textAnchor(i) {\n\t\tif (snapTicks === true) {\n\t\t\tif (i === 0) {\n\t\t\t\treturn 'start';\n\t\t\t}\n\t\t\tif (i === tickVals.length - 1) {\n\t\t\t\treturn 'end';\n\t\t\t}\n\t\t}\n\t\treturn 'middle';\n\t}\n</script>\n\n<g class='axis x-axis'>\n\t{#each tickVals as tick, i}\n\t\t<g class='tick tick-{ tick }' transform='translate({$xScale(tick)},{$yRange[0]})'>\n\t\t\t{#if gridlines !== false}\n\t\t\t\t<line y1='{$height * -1}' y2='7' x1='0' x2='0'></line>\n\t\t\t{/if}\n\t\t\t<text\n\t\t\t\tx=\"{xTick || isBandwidth ? $xScale.bandwidth() / 2 : 0 }\"\n\t\t\t\ty='{yTick}'\n\t\t\t\tdx='{dxTick}'\n\t\t\t\tdy='{dyTick}'\n\t\t\t\ttext-anchor='{textAnchor(i)}'>{tick}</text>\n\t\t</g>\n\t{/each}\n</g>\n\n<style>\n\t.tick {\n\t\tfont-size: .725em;\n\t}\n\n\tline,\n\t.tick line {\n\t\tstroke: #000;\n\t}\n\n</style>\n",
    "<script>\n\timport { getContext } from 'svelte';\n\n\tconst { width, height, xScale, yScale, yRange } = getContext('LayerCake');\n\t\n\texport let value;\n\texport let hasMarker = false;\n\n\texport let ticks = undefined;\n\texport let xTick = undefined;\n\texport let yTick = 16;\n\texport let dxTick = 0;\n\n\texport let layout;\n\n\tlet unit = layout.unit ? layout.unit : '';\n\tlet decimals = layout.decimals ? layout.decimals : 0;\n\n\t$: isBandwidth = typeof $xScale.bandwidth === 'function';\n\n\t$: tickVals = Array.isArray(ticks) ? ticks :\n\t\tisBandwidth ?\n\t\t\t$xScale.domain() :\n\t\t\t$xScale.ticks(ticks);\n\n</script>\n\n{#if hasMarker === true}\n<g class='axis x-axis'>\n\t\t<g class='tick' transform='translate({$xScale(value)},{$yRange[0]})'>\n\t\t\t<line y1='{($height * -1) - 10}' y2='0' x1='0' x2='0'></line>\n\t\t\t<text\n\t\t\t\tx=\"{xTick || isBandwidth ? $xScale.bandwidth() / 2 : 0 }\"\n\t\t\t\ty='{yTick}'\n\t\t\t\tdx='{dxTick}'\n\t\t\t\tdy='{($height * -1) - 30}'\n\t\t\t\ttext-anchor='middle'>{value.toFixed(decimals)}{unit}</text>\n\t\t</g>\n</g>\n{/if}\n\n<style>\n\t.tick {\n\t\tfont-size: 0.9em;\n\t\tfont-weight: 700;\n\t}\n\n\tline,\n\t.tick line {\n\t\tstroke: #000;\n\t\tstroke-width: 2;\n\t}\n\n</style>",
    "<script>\r\n\texport let data;\r\n\texport let layout;\r\n\texport let type = \"\";\r\n\r\n\tlet code = false;\r\n\tlet buttons;\r\n\t\r\n\tfunction embedCode(obj) {\r\n\t\tlet svg = obj.previousElementSibling.firstChild.firstChild;\r\n\t  let width = svg.getBoundingClientRect().width;\r\n    let height = svg.getBoundingClientRect().height;\r\n\t\tlet iframe = ['<iframe width=\"' + width + '\" height=\"' + height + '\" src=\"', '\" frameborder=\"0\"></iframe>'];\r\n\t\tlet chart = 'https://bothness.github.io/svelte-charts/embed/' + type + '.htm';\r\n\t\tlet query = '?data=' + btoa(JSON.stringify(data)) + '&layout=' + btoa(JSON.stringify(layout));\r\n\t\tlet code = iframe[0] + chart + query + iframe[1];\r\n\t\treturn code;\r\n\t}\r\n\t\r\n\tfunction dwnSVG(obj) {\r\n      //Get SVG string\r\n      let string = obj.previousElementSibling.firstChild.firstChild.outerHTML;\r\n\r\n      //Convert SVG string to BLOB\r\n      let blob = new Blob([string], { type: \"image/svg+xml;charset=utf-8\" });\r\n\t\t\r\n\t\t  // Activate download\r\n\t\t\tlet url = window.URL || window.webkitURL || window;\r\n      let link = url.createObjectURL(blob);\r\n\t\t  download(link, 'chart.svg');\r\n    }\r\n\t\r\n\tfunction dwnPNG(obj) {\r\n\t\t  let svg = obj.previousElementSibling.firstChild.firstChild;\r\n\t    let width = svg.getBoundingClientRect().width;\r\n      let height = svg.getBoundingClientRect().height;\r\n      var canvas = document.createElement('canvas');\r\n      canvas.width = width;\r\n      canvas.height = height;\r\n      var data = new XMLSerializer().serializeToString(svg);\r\n      var win = window.URL || window.webkitURL || window;\r\n      var img = new Image();\r\n      var blob = new Blob([data], { type: 'image/svg+xml' });\r\n      var url = win.createObjectURL(blob);\r\n      img.onloadend = function () {\r\n        canvas.getContext('2d').drawImage(img, 0, 0);\r\n        win.revokeObjectURL(url);\r\n        var uri = canvas.toDataURL('image/png').replace('image/png', 'octet/stream');\r\n        download(uri, 'chart.png');\r\n      }\r\n      img.src = url;\r\n    }\r\n\t\r\n\tfunction download(link, filename) {\r\n      let a = document.createElement(\"a\");\r\n      a.download = filename;\r\n      a.href = link;\r\n      document.body.appendChild(a);\r\n      a.click();\r\n      document.body.removeChild(a);\r\n\t}\r\n\t\r\n\tfunction getData() {\r\n\t\tlet string = 'label,value\\n';\r\n\t\tfor (let i in data) {\r\n\t\t\tstring += data[i].label + ',' + data[i].value + '\\n';\r\n\t\t}\r\n\t\t\r\n\t\t//Convert CSV string to BLOB\r\n    let blob = new Blob([string], { type: \"text/csv;charset=utf-8\" });\r\n\t\t\r\n\t\t// Activate download\r\n\t  let url = window.URL || window.webkitURL || window;\r\n    let link = url.createObjectURL(blob);\r\n\t\tdownload(link, 'data.csv');\r\n\t}\r\n</script>\r\n\r\n<style>\r\n\t.share-buttons {\r\n\t\tpadding-top: 8px;\r\n\t}\r\n\t.embed {\r\n\t\tmax-width: 400px;\r\n\t\tpadding: 6px 10px;\r\n\t\tborder: solid 1px #555;\r\n\t\tborder-radius: 2px;\r\n\t\toverflow-wrap: anywhere;\r\n\t\tbackground-color: #fff;\r\n\t\tposition: absolute;\r\n    z-index: 10;\r\n\t}\r\n\t.share {\r\n\t\tfont-size: 0.7em;\r\n\t\tpadding: 2px 4px;\r\n\t\tmargin-bottom: 0;\r\n\t}\r\n</style>\r\n\r\n<div class='share-buttons' bind:this={buttons}>\r\n  <button class='share' on:click={() => {code = !code}}>Embed</button>\r\n\t<button class='share' on:click={() => dwnSVG(buttons)}>SVG</button>\r\n\t<button class='share' on:click={() => dwnPNG(buttons)}>PNG</button>\r\n\t<button class='share' on:click={getData}>CSV</button>\r\n</div>\r\n{#if code}\r\n<div class='embed'>\r\n\t<code>{embedCode(buttons)}</code>\r\n</div>\r\n{/if}"
  ],
  "names": [],
  "mappings": "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"
}